// Create node and basic attribute
load csv from 'file:///node.csv' as n
CREATE (p:V {embed: toInteger([1]), vid: n[2], title: n[3], totalView: n[4]})

// Set index to optimise loading edges
CREATE INDEX ON :V(embed)

// Create edge
load csv from 'file:///edge.csv' as e
match (a:V)
match (b:V)
where a.embed = toInteger(e[1]) and b.embed = toInteger(e[2])
create (a)-[r:L]->(b)
return r

// Add attribute for edge
load csv from 'file:///edge.csv' as e
match (a:V)-[r:L]->(b:V)
where a.embed = toInteger(e[1]) and b.embed = toInteger(e[2])
set r.weight = toFloat(e[3])

load csv from 'file:///a2.csv' as row
match (n:V)
where n.embed = toInteger(row[1])
set n.genre = row[4]
set n.publishDate = row[5]
set n.dailyView = row[6]
set n.channelId = row[8]
set n.description = row[9]
set n.thumbnails = row[10]

//averageWatch
match (n:V)
where exists(n.averageWatch)
return n.averageWatch
order by n.averageWatch DESC
limit 25

//degree calculation
match (n:V)
return size((n)-->()) as out_degree, size((n)<--()) as in_degree

match (g:G)-[]-(a:A)
with g.genre as p, max(size((a)-->(:V))) as k
match (g:G)-[]-(a:A)
where size((a)-->(:V)) = k and g.genre = p
return p as Genre, a.artist as Artist, k as Video_Counts